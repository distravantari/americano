<!---
title: Tailwind CSS User Settings Page - Flowbite
description: Get started with a free and open-source admin dashboard layout built with Tailwind CSS and Flowbite featuring charts, widgets, CRUD layouts, authentication pages, and more
layout: dashboard
footer: true
--->
<div class="flex flex-col items-center justify-center px-6 pt-8 mx-auto pt:mt-0 dark:bg-gray-900">
    <h1 class="mb-3 text-2xl font-bold leading-tight text-gray-900 sm:text-4xl lg:text-5xl dark:text-white">Americano</h1>
    <p class="mb-5 text-base font-normal text-gray-500 md:text-lg dark:text-gray-400">by OHT <a href="#" class="text-primary-700 hover:underline dark:text-primary-500">contact us</a>.</p>
</div>

<div class="grid grid-cols-1 px-4 pt-6 xl:grid-cols-3 xl:gap-4 dark:bg-gray-900">
    <div class="p-4 bg-white border border-gray-200 shadow-sm dark:border-gray-700 sm:p-6 dark:bg-gray-800">
        <!-- Card header -->
        <div class="items-center justify-between lg:flex">
          <div class="mb-4 lg:mb-0">
            <!-- <h3 class="mb-2 text-xl font-bold text-gray-900 dark:text-white" style="text-align: center;">Table</h3> -->
            <!-- <span class="text-base font-normal text-gray-500 dark:text-gray-400">This is a list of latest transactions</span> -->
          </div>
        </div>
        <!-- Table -->
        <div class="flex flex-col mt-6">
          <div class="overflow-x-auto">
            <div class="inline-block min-w-full align-middle">
              <div class="overflow-hidden shadow ">
                <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-600">
                  <thead >
                    <tr>
                        <th scope="col" class="p-1 text-xs font-medium tracking-wider text-left text-gray-500 uppercase dark:text-white">
                          #
                        </th>
                      <th scope="col" class="p-4 text-xs font-medium tracking-wider text-left text-gray-500 uppercase dark:text-white">
                        Name
                      </th>
                      <th scope="col" class="p-1 text-xs font-medium tracking-wider text-left text-gray-500 uppercase dark:text-white" style="text-align: center;">
                        +
                      </th>
                      <th scope="col" class="p-1 text-xs font-medium tracking-wider text-left text-gray-500 uppercase dark:text-white" style="text-align: center;">
                        -
                      </th>
                      <th scope="col" class="p-1 text-xs font-medium tracking-wider text-left text-gray-500 uppercase dark:text-white" style="text-align: center;">
                        +-
                      </th>
                    </tr>
                  </thead>

                  <tbody id="standings" class="bg-white dark:bg-gray-800"></tbody>

                </table>

              </div>
            </div>
          </div>
        </div>
        <!-- Card Footer -->
        <div class="flex items-center justify-between pt-3 sm:pt-6">
         
        </div>

    <!-- <br> -->
    </div>
    <!-- Right Content -->
    <div class="col-span-2">
        <div class="flex flex-col">
            <div class="overflow-x-auto">
                <div class="inline-block min-w-full align-middle">
                    <div class="overflow-hidden shadow">
                        <table class="min-w-full divide-y divide-gray-200 table-fixed dark:divide-gray-600">
                            <thead class="bg-gray-100 dark:bg-gray-700">
                                <tr>
                                    <th scope="col" class="p-4 text-xs font-medium text-center text-gray-500 uppercase dark:text-gray-400">
                                        
                                    </th>
                                    <th scope="col" class="p-4 text-xs font-medium text-center text-gray-500 uppercase dark:text-gray-400">
                                        <!-- Technology -->
                                        Players
                                    </th>
                                    <th scope="col" class="p-4 text-xs font-medium text-center text-gray-500 uppercase dark:text-gray-400">
                                        Games
                                    </th>
                                    <th scope="col" class="p-4 text-xs font-medium text-center text-gray-500 uppercase dark:text-gray-400">
                                        <!-- ID -->
                                        Players
                                    </th>
                                    <th scope="col" class="p-4 text-xs font-medium text-center text-gray-500 uppercase dark:text-gray-400"> 
                                       
                                    </th>
                                </tr>
                            </thead>
                            <tbody id="rounds" class="bg-white divide-y divide-gray-200 dark:bg-gray-800 dark:divide-gray-700">
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        
        
    </div>
    <br>

</div>

<!-- Sticky Bottom -->
<div class="sticky bottom-0 right-0 items-center w-full p-4 bg-white border-t border-gray-200 sm:flex sm:justify-between dark:bg-gray-800 dark:border-gray-700">
    <div class="flex items-center mb-4 sm:mb-0">
        <!-- <a href="#" class="inline-flex justify-center p-1 text-gray-500 rounded cursor-pointer hover:text-gray-900 hover:bg-gray-100 dark:hover:bg-gray-700 dark:hover:text-white">
            <svg class="w-7 h-7" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd"></path></svg>
        </a>
        <a href="#" class="inline-flex justify-center p-1 mr-2 text-gray-500 rounded cursor-pointer hover:text-gray-900 hover:bg-gray-100 dark:hover:bg-gray-700 dark:hover:text-white">
            <svg class="w-7 h-7" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path></svg>
        </a> -->
        <!-- <span class="text-sm font-normal text-gray-500 dark:text-gray-400">Showing <span class="font-semibold text-gray-900 dark:text-white">1-20</span> of <span class="font-semibold text-gray-900 dark:text-white">2290</span></span> -->
        

        <!-- <a id="generateRounds" class="inline-flex items-center justify-center flex-1 px-3 py-2 text-sm font-medium text-center text-white rounded-lg bg-primary-700 hover:bg-primary-800 focus:ring-4 focus:ring-primary-300 dark:bg-green-600 dark:hover:bg-green-700 dark:focus:ring-green-800">
            Generate
        </a> -->
    </div>
    <div class="flex items-center space-x-3">

        <button type="button" id="updateProductButton" data-drawer-target="drawer-update-product-default" data-drawer-show="drawer-update-product-default" aria-controls="drawer-update-product-default" data-drawer-placement="right" class="inline-flex items-center justify-center flex-1 px-3 py-2 text-sm font-medium text-center text-white rounded-lg bg-primary-700 hover:bg-primary-800 focus:ring-4 focus:ring-primary-300 dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800">
            <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z"></path><path fill-rule="evenodd" d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" clip-rule="evenodd"></path></svg>
            Board
        </button>
        <a id="doneAmericano" class="inline-flex items-center justify-center flex-1 px-3 py-2 text-sm font-medium text-center text-white rounded-lg bg-primary-700 hover:bg-primary-800 focus:ring-4 focus:ring-primary-300 dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-900">
            Done
            <svg class="w-5 h-5 ml-1 -mr-1" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path></svg>
        </a>
    </div>
</div>

<!-- Edit Product Drawer -->
<div id="drawer-update-product-default" class="fixed top-0 right-0 z-40 w-full h-screen max-w-xs p-4 overflow-y-auto transition-transform translate-x-full bg-white dark:bg-gray-800" tabindex="-1" aria-labelledby="drawer-label" aria-hidden="true">
    <h5 id="drawer-label" class="inline-flex items-center mb-6 text-sm font-semibold text-gray-500 uppercase dark:text-gray-400">Update Games</h5>
    <button type="button" data-drawer-dismiss="drawer-update-product-default" aria-controls="drawer-update-product-default" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 absolute top-2.5 right-2.5 inline-flex items-center dark:hover:bg-gray-600 dark:hover:text-white">
        <svg aria-hidden="true" class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path></svg>
        <span class="sr-only">Close menu</span>
    </button>
    <form action="#">
        <div class="space-y-4">
            <div>
                <button type="submit" class="w-full justify-center text-white bg-primary-700 hover:bg-primary-800 focus:ring-4 focus:outline-none focus:ring-primary-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800">
                    0
                </button>
            </div>
            <div>
                <button type="submit" class="w-full justify-center text-white bg-primary-700 hover:bg-primary-800 focus:ring-4 focus:outline-none focus:ring-primary-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800">
                    1
                </button>
            </div>
            <div>
                <button type="submit" class="w-full justify-center text-white bg-primary-700 hover:bg-primary-800 focus:ring-4 focus:outline-none focus:ring-primary-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800">
                    2
                </button>
            </div>
            <div>
                <button type="submit" class="w-full justify-center text-white bg-primary-700 hover:bg-primary-800 focus:ring-4 focus:outline-none focus:ring-primary-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800">
                    3
                </button>
            </div>
            <div>
                <button type="submit" class="w-full justify-center text-white bg-primary-700 hover:bg-primary-800 focus:ring-4 focus:outline-none focus:ring-primary-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800">
                    4
                </button>
            </div>
            <div>
                <button type="submit" class="w-full justify-center text-white bg-primary-700 hover:bg-primary-800 focus:ring-4 focus:outline-none focus:ring-primary-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800">
                    5
                </button>
            </div>
            <div>
                <button type="submit" class="w-full justify-center text-white bg-primary-700 hover:bg-primary-800 focus:ring-4 focus:outline-none focus:ring-primary-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800">
                    6
                </button>
            </div>
            
        </div>
    </form>
</div>

<script>
    function renderRounds(i,name, round){
        return renderedHTML = `
            <tr class="hover:bg-gray-100 dark:hover:bg-gray-700">
                <td class="p-4 text-sm font-normal text-gray-500 whitespace-nowrap dark:text-white text-center">
                    
                </td>
                <td class="p-4 text-base font-medium text-gray-900 whitespace-nowrap dark:text-white text-center">
                    <div id="playerName-${i}1" class="text-base font-semibold text-gray-900 dark:text-white">${name[0]}</div>
                    <div id="playerName-${i}2"class="text-base font-semibold text-gray-900 dark:text-white">${name[1]}</div>
                </td>
                <td class="max-w-sm p-4 overflow-hidden text-base font-normal text-gray-500 truncate xl:max-w-xs dark:text-gray-400 text-center">
                    <button type="button" id="addButton1" onclick="updateScore('+', 'scoreButton-${i}-1', '${round}')" class="inline-flex items-center px-3 py-2 text-sm font-medium text-center text-white rounded-lg bg-primary-700 hover:bg-primary-800 focus:ring-4 focus:ring-primary-300 dark:bg-primary-0 dark:hover:bg-primary-700 dark:focus:ring-primary-800">
                        +
                    </button>
                    <button type="button" id="scoreButton-${i}-1" class="inline-flex items-center px-3 py-2 text-sm font-medium text-center text-white rounded-lg bg-primary-700 hover:bg-primary-800 focus:ring-4 focus:ring-primary-300 dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800">
                        0
                    </button>
                    <button type="button" id="addButton1" onclick="updateScore('-', 'scoreButton-${i}-1', '${round}')" class="inline-flex items-center px-3 py-2 text-sm font-medium text-center text-white rounded-lg bg-primary-700 hover:bg-primary-800 focus:ring-4 focus:ring-primary-300 dark:bg-primary-0 dark:hover:bg-primary-700 dark:focus:ring-primary-800">
                        -
                    </button>
                    vs
                    <button type="button" id="addButton1" onclick="updateScore('+', 'scoreButton-${i}-2', '${round.reverse()}')" class="inline-flex items-center px-3 py-2 text-sm font-medium text-center text-white rounded-lg bg-primary-700 hover:bg-primary-800 focus:ring-4 focus:ring-primary-300 dark:bg-primary-0 dark:hover:bg-primary-700 dark:focus:ring-primary-800">
                        +
                    </button>
                    <button type="button" id="scoreButton-${i}-2" class="inline-flex items-center px-3 py-2 text-sm font-medium text-center text-white rounded-lg bg-primary-700 hover:bg-primary-800 focus:ring-4 focus:ring-primary-300 dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800">
                        0
                    </button>
                    <button type="button" id="addButton1" onclick="updateScore('-', 'scoreButton-${i}-2', '${round}')" class="inline-flex items-center px-3 py-2 text-sm font-medium text-center text-white rounded-lg bg-primary-700 hover:bg-primary-800 focus:ring-4 focus:ring-primary-300 dark:bg-primary-0 dark:hover:bg-primary-700 dark:focus:ring-primary-800">
                        -
                    </button>
                </td>
                <td class="p-4 text-base font-medium text-gray-900 whitespace-nowrap dark:text-white text-center">
                    <div  id="playerName-${i}3" class="text-base font-semibold text-gray-900 dark:text-white">${name[2]}</div>
                    <div  id="playerName-${i}4" class="text-base font-semibold text-gray-900 dark:text-white">${name[3]}</div>
                </td>
                <td class="p-4 text-base font-medium text-gray-900 whitespace-nowrap dark:text-white text-center">
                    
                </td>
            </tr>
        `;
    }
</script>

<!-- // Function to create a table row with provided data -->
<script>
    function createTableRow(data,i) {
      var row = document.createElement('tr');
      row.className = 'hover:bg-gray-100 dark:hover:bg-gray-700'; // Add class to the row
    //   console.log("index", data)
      data.forEach(function(cellData, index) {
        var cell = document.createElement('td');
        cell.className = 'text-sm font-normal text-gray-500 whitespace-nowrap'; // Add class to the cell

        if (index == 0){
            cell.textContent = i+1;
        }else{
            cell.textContent = cellData;
            // Add style to the first cell
            if (index === 1 || index === 5 || index === 8) {
            //   cell.style.textAlign = 'center';
                cell.className += ' p-4 dark:text-white';
                if (index !== 1){
                    cell.style.textAlign = 'center';
                }
            } else {
                if (index !== 0){
                    cell.style.textAlign = 'center';
                    cell.className = 'p-4 text-sm font-normal text-gray-900 whitespace-nowrap dark:text-gray-400';
                }
            }
        }
        
        row.appendChild(cell);
      });
      return row;
    }
  
    function generateStandings(rowData) {
        // console.log("generateStandings params", rowData)
    
        // Get the target div element
        var targetDiv = document.getElementById("standings");
        // Clear the existing input fields
        targetDiv.innerHTML = '';
    
        // Loop through the data and create table rows
        rowData.forEach(function(data, index) {
            var row = createTableRow(data, index);
            targetDiv.appendChild(row);
        });

        localStorage.setItem('standings', JSON.stringify(rowData));
    }

    function createRounds (roundsparams, rowData){
        const data = roundsparams.round
        const jsonData = localStorage.getItem('matchData');
        const matchData = JSON.parse(jsonData);
        const ridx = matchData.rounds[0].round;

        // console.log("matchData",ridx);

        data.forEach(function(cellData, index) {
            var name = [];
            cellData.forEach(function(id, idx) {
                name.push(rowData[id][1]);
            })
            
            // console.log("matchData",ridx[index]);
            const render = renderRounds(index,name, ridx[index]);
            document.getElementById('rounds').innerHTML += render;
        })
    }
</script>

<!-- backend call to create Match -->
<script>
    console.log("domain", localStorage.getItem('domain')); // Output: 'yourdomain.com'

    const jsonData = localStorage.getItem('matchData');
    const jsonDataStandings = localStorage.getItem('standings');
    // Parse the JSON string back into a JavaScript object
    const matchData = JSON.parse(jsonData);
    const standingData = JSON.parse(jsonDataStandings);

    console.log("tes", matchData); 
    console.log("matchData from LS", matchData.rounds[0].round);
    console.log("Standing from LS", standingData);
    const queryString = new URLSearchParams(matchData).toString();

    var standings,rounds = [];

    generateStandings(standingData);
    createRounds(matchData.rounds[0], matchData.standing);
    
</script>


<!-- script for updating match score -->
<script>
    function updateScore(type, who, round){
        console.log("round", round);
        // var whoScore = parseInt(document.getElementById(who));
        var params = document.getElementById(who);
        var whoScore = params.textContent.trim();

        const localStore = localStorage.getItem('matchData');
        const localStanding = localStorage.getItem('standings');
        // Parse the JSON string back into a JavaScript object
        const matchData = JSON.parse(localStore);
        const standingData = JSON.parse(localStanding);

        const maxScore = parseInt(matchData.maxScore);
        // console.log("maxScore", matchData);

        // let index = scorelist.indexOf(whoScore);
        let currentScore = parseInt(whoScore);
        if (type == '-'){
            currentScore--;
            if (currentScore < 0) {
                currentScore = 0
            }else {
                updateToDB(round, type, standingData)
            }
        }else {
            currentScore++;
            if (currentScore > maxScore) {
                currentScore = maxScore
            }else{
                updateToDB(round, type, standingData)
            }
        }

        params.textContent = currentScore;
        // console.log("round", matchData.standing, round, type);

        // var query = {};
        // query.round = round;
        // query.currentScore = currentScore;
        // query.table = matchData.standing;

        
    }

    function updateToDB(round, type, standing){
        // Data to be sent in the body of the request (in JSON format)
        const data = {
            round: round,
            type: type,
            table: standing
        };

        // Configuration for the fetch request
        const options = {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json' // Indicate that the request body is JSON
            },
            body: JSON.stringify(data) // Convert data to JSON string
        };

        // console.log("options", options);
        var domain = localStorage.getItem('domain');
        apiCall(`${domain}/connect/updatetable`, options)
        .then(response => {
            // Check if the response is successful (status code 200)
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            // Parse the JSON response
            return response.json();
        })
        .then(match => {
            // Process the JSON data
            localStorage.setItem('standings', JSON.stringify(match.data))
            generateStandings(match.data);
            // console.log("AAPI resonse",match.data);
            
        })
        .catch(error => {
            // Handle any errors that occur during the fetch
            console.error('Error fetching data:', error);
        });
    }
</script>
